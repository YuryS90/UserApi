{# Определение макроса с именем renderList, который принимает аргумент categories
Макрос - фрагмент шаблона, который можно вызывать из других частей шаблона с использованием
{{ _self.renderList() }}, где _self - объект, который ссылается на текущий шаблон #}
{% macro renderList(categories) %}
    <ul class="list-group" style="border: 1px solid black" id="category">

        {% for category in categories %}
            <li class="list-group-item list-group-item-light d-flex" style="border: 1px solid black">
                <a href="{{ url_for('category.show', { 'category': category.id }) }}"
                   class="mr-2" style="color: #020202;">
                    {{ category.title }}
                </a>

                <div class="dropdown show">
                    <a class="btn btn-sm" href="#" role="button" id="dropdownMenuLink" data-toggle="dropdown"
                       aria-haspopup="true" aria-expanded="false">
                        <i class="fas fa-cog"></i>
                    </a>

                    <div class="dropdown-menu" aria-labelledby="dropdownMenuLink">

                        <a class="dropdown-item" href="{{ url_for('category.show', { 'category': category.id }) }}">
                            Просмотр</a>

                        <a class="dropdown-item" href="{{ url_for('category.edit', { 'category': category.id }) }}">
                            Изменить</a>

                        {# data-id => отправка формы js #}
                        <a class="dropdown-item delete-category {{ (category.childs) ? ' disabled' : '' }}"
                           href="#" data-id="{{ category.id }}">Удалить</a>

                    </div>
                </div>

                {# Если у элемента есть дочерние элементы (category.childs),
                то вызываем макрос renderList рекурсивно для построения вложенного списка. #}
                {% if category.childs is defined and category.childs|length > 0 %}
                    {# Рекурсивный вызов макроса для дочерних элементов.
                    Макрос вызывает сам себя с новым списком дочерних элементов
                    в качестве аргумента (category.childs).
                    Условие завершения - отсутствие дочерних элементов для текущего узла. #}
                    {{ _self.renderList(category.childs) }}
                {% endif %}
            </li>
        {% endfor %}
    </ul>
{% endmacro %}

{# char - символ, который нужно повторить; times - количество повторений #}
{% macro repeatString(char, times) %}
    {# Переменная, которая будет накапливать результат повторений символа #}
    {% set result = '' %}
    {# Количество выполнения повторений #}
    {% for i in 1..times %}
        {# В каждой итерации добавляет символ char к result. "~" - конкатенации строк #}
        {% set result = result ~ char %}
    {% endfor %}
    {# Возвращает строку, в которой символ char повторяется times раз. #}
    {{ result }}
{% endmacro %}

{# Создает option для каждой категории и их дочерних категорий. depth - уровень вложенности #}
{% macro renderCategoryOptions(categories, depth = 0, categoryCurrent = null) %}
    {% for category in categories %}
        <option value="{{ category.id }}"
                {{ categoryCurrent.parentId == category.id ? 'selected' : '' }}
                {{ categoryCurrent.id == category.id ? 'disabled' : '' }}>
            {# Добавление '-'. Если depth больше 0, тогда используется repeatString,
                        чтобы повторить символ дефиса нужное количество раз. #}
            {% if depth > 0 %}{{ _self.repeatString('-', depth) ~ ' ' }}{% endif %}
            {{ category.title }}
        </option>
        {% if category.childs is defined and category.childs|length > 0 %}
            {# Для дочерних категорий, увеличивая уровень вложенности на 1 #}
            {{ _self.renderCategoryOptions(category.childs, depth + 1, categoryCurrent) }}
        {% endif %}
    {% endfor %}
{% endmacro %}